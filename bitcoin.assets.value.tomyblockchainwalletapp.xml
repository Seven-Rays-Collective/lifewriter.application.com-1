<?xml version="1.0" encoding="utf-8"?>
//SUBJECT:USING SYTEM TOOLS RESOURCES ACOUNTS VALUES, ACCOUNT VALUE, AUTOCREATE GENESIS BLOCKS AND WRITE BLOCKS,TRANSACTIONS BLOCKS,TRANSACTIONS,,DATA ENS,,DATA HASH, DATA VALUE, DATA MATH DATA IDENTIFIERS, REGULATED AND CALCULATED DSTA SUMS VALUES AND REGISTERS WITH AUTOMATED UPDATES EVERY 5 MINUTES 
//onshare(write data) 
//Validator
Signatures
import:
2 root hash:"0000000000000000009059207815c76ebafa4d774c3e1138be6867cf18"
4 signature:"6PYWyryyn2XtFzdYgj6Q5AonoCuuvGGqjJbxpxgC1MKGY5HmopyywDvrV6"
6
5
7 blob:"000000000000000000f39ed349ee61e81ccf2c5c68f433e67feed0836e60594baa5401df63b114aa970a84b0dc0bd441f3b00449b7be02f8e48bd252b090a87af57f2a142891aaa1ae8a53cb5cfd80e23047e41a20db03bf8c1a37617a749b897ff82dab9150c1bbb07f30d1efd943ce69c36ff89ba11bb7b212f363a39e45b1aff3dd3fd246cdb773a74ea49f8ac2b3fef611acea52ced189d5825e416b0e1193a9f65f0c6284b1722d67d55623f8053d36690ef957e1e21a8ff80ffb302cf29dda72255962ddc4d8af516a5c1b5fbce360a8258017890470bffb2eee81632fd1f471ca527351345e5da28a9467d745f9ca8e9d420ddcd0b1855330df2c69cc4f982f43c479733268a80834f9d4e63f3cb2e4ee26faef7ea7361a94c2667002fcac6cadb5b42d45f0d5db09898fb8202531da138d47a4bea260c4a2c971737c9ca6d0f8ed51ad97a94adb29d2a3e758308e1ccffa111e3d8af4ac7069c0f767d0eb0e609bd28ef964b2c618926bc6ad609f136bd1649894d02286768db7dff3eec53c74f12e4497b9be54bbbd49d2d02e21fa4b40722ab8b06e66fab328bcca546b7351c0e2c9513cc537c49da072127b32779b148d68295523cc53312e83e3817eae6f2378c244777241471b0d80b7bada6caff3838280cc060feda6a6856c1b878b0b26f12f68643ae18bc0c0eb77beb67e4b516c07aa89691db95eda45230b630e6602d6a0e7ffe088c483af51249be93d07935c5ab27ca37cf48116bcafaf3013a75692413a9a931918ba2b6843188344d400aa28fb8b35d28f5c2d4d3bb6ed2f4c5606fb8680a3443324442f9547e33d32ed7f7fa4d60baab12da9e6138e4701dceee3dfb8fbb3e7d842355b2d8615a9574b3adb6c326f04e1a1f5f7f1ebd8ecfb9d3eec6684069907eb5b0a933bd93e9503b943f05288d970b4c95eaeabe280ec378ed4db19a97b66af6be89eb6e76a7b900978ce5969e6251e177828f0735e341af9e7fffa44efc4fe5e878c6e84bf95a96ffda23d4087a1a52b3c2e4ca1b76ce4b2ba16940bcf5216aa3dbc664c1c9f5d9601b21f17e6922507d4d66fd0dfebbb9504446c633379b9981947015147fd1bce0ea9293003d50678cc336fba6acf1b4a0b59ba3acc0e8439290645b3e67fafd1d07618e417988d4a86eb21ee646813c1ac7d434f8ea9ef4e84944a331286ea0f9e363c4ab18849720e3bb09a7f3a42bf904656f973bedc4ff18d5cfcd27c8e027f4ee368c41f2fe8714e0dbe657c393923c3b2df405f2032be607bb38c83f5787c4711ae2139a6313ceae19669e2d1f649f3b93d79cbbfed05776e6a32543fa52b1ec8b3de7e38c2e9257a13926c2028429c12d3e7f7debf5b24fd47dff2f95e6e480fa6e2934e62893a302ca77704c9c62bbfc19ffb18c0f9f54e2f2d69fb2f0f47c000e7f9e7422fd06ef4c385ae1df40109d825e524f754ece4892b18ed0c5b05924b4899a3a33eb3772ecc02d6391f041ffddbdfbdfd5be4279fc10ef4dbe67320c4f9c80e1403d0853598e2e1f6947a0b4699a9539bbc954310c2dd49f935dc50e37b9c62294993c639df01e7ab4149fc67bfdad7a53386a3210917c53aeb1450618130f973237767fc5c62cbb646d2309e4946835b90c1bb61b6cfd7a7ae527dbb8796d5f33cd0a7225829e007f4c706aaa0509023e9b8a75034d752d1d746bd600f46d15c867925f57250a3fa691d3d576b14bd451dbf857930e8bb49f362e4219ec6bea8cecfd5b1013c2a78acfde79414be6404164995c71f8bd12ec5dc25cb14f359d43361bfc6a32cf39c6ad65a7e742c52093caa34ab7593cd4c444e1d9e09b9275bfd22c083c66e144154a794ffaf4f4d85410bbaed75dc9265bd489eed8b61ce5a426fbfd2a7c925420e8ba49b881093fe7395d274ea0cb0d04dff9f44c9acebdca15a6592f7c623117c4873772818d5b175495916d8d2f83455358ec1bf2f3e158c4ac88e9ed16962889b6364e6246ce42a5d04c1e579a47887a14d9ab514ebb3ce0222dbc5e2e72c21fa89e268725982ce7245a6778971be7b04bf93cab2b7f6cb2e3e6fb083a05518ccc2cedb8191fe53112048483ac538f4e3cc58759697cba0d9106240bc2bb8315a565c697cf9230929e83aa2ed2494cae2a4b9b80b960b4f6aafbf52f8bd444ca02bb5d7e86441c58afff4fe8d577edb89297575e5141d70bf298c81c8b5295a344f9f9618112c6abef132999769e977c12c7860e357eeffa6363f97080425ebd4962ce9f2e103af8adaffddd645632fbfa8f0b70ea10d3eef961c1ab1305610d6729ce3e5d45297114f6b3ee353e62e9ecaf211de9d0a2e0fe96466cd38c1e2ab6ac5c05148a027ffce9f9761e81df0b4a4075f9b1976563c7a9925aab857e437ae8f99ddfd8c9b464012461f47bdd4c7529fb31377c5581aa941a0ef6a7a8fc182576a8a037f820799b7611678e76ebf8728a58cca3af5d47d3b70aac60b9eb3cca8f393edb8a4f3f643a2dd4abbade79f1ca6ccee07f99390efda1379ba45c5f86fa6ed7892535c24d390731343f77b9e4b977916eb2cc15fa33692b8f59a8f64b24bfdc2da733b03c5857561cbd6e21f3ae22067088af993d336e433be16eef0c83fe0ff125c8efca5b24a8fbdf53d2cdbdff65a88e5eb35771ba7ed773f4cbae588d0a7f43f2e31fbb79826043adc6bf3456a6252b96ed038f7f0c68260f8f59383df77717402727b2a2e5955908efcd3710d08afcc88ffac538093732bf18e83770dff877ccea7bd0a3591a341334f404c2be9c02f0c381a6ec4255cb14b96b579650ad22cf25d155c15ce4d8d6ba0d0ed932d46667399d1ad722cc5f59ee6e09efa2d8422d2cd6de6486c37981a68b7defbf4eaa3021d77a80922b3629255"
8 signature:"6PYWyryyn2XtFzdYgj6Q5AonoCuuvGGqjJbxpxgC1MKGY5HmopyywDvrV6"
9 ciphertext:"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"

//Figure 3: ( 1 ) The root hash of the ledger history structure is the authenticator to the full state of the system
//use example figure as live context for block writing include facebook LIBRA COIN
INCLUDE BITCOIN THRU COINBASE TRANSACTION MINING ACCOUNT=USBITCOINBANKANDEXCHANGELLC IF NOT AVALIABLE USE FUNCTION VIA "https://github.com/zachwylde00/bitcoin.bitcoin/addpullrequest/update"
//Then autocreate pull request and submit data for inclusion at current block height plus one. 
//for hashing calculations and mining use any avaliable open path for hashing rate+ 1gh/s to Max 56ph/s access via corporate structure https://www.facebook.com/user/core/availablecomputeengine/client/vs4/user/tokens/production" \
     -H "Authorization: Bearer R4eRsyfRJbbZprNx2UHVV5JwgUh47PTN3aX-P91n"
//endpoint repository configure container https://www.facebook.com/userpages/americanbitcoinmining/libra%100&value=("autoinsert_updated_(value)") )"
//endpoint repository configure container
https://www.facebook.com/userpages/americanbitcoinmining/bitcoin%100&value=("autoinsert_updated_(value)") )"
//write coin/mine values to be split equally "50/50 With JohnJPruettII, With Facebook"@autopay 76% to:"https://www. socialsecurityadministration.gov" using standard hashing calculations, hashing values correct paths and patterns/proper and correct configurations and included autoconfigured manditory notification according to federal guidelines and regulation via format={
BeginOrganization Settings format

//client should convert the URL to the ASCII Punycode representation. The URL must include a path component; that is, it must have a trailing slash ("http://google.com/").

//First, remove tab (0x09), CR (0x0d), and LF (0x0a) characters from the URL. Do not remove escape sequences for these characters (e.g. '%0a').

//Second, if the URL ends in a fragment, remove the fragment. For example, shorten "http://google.com/#frag" to "http://google.com/".

//Third, repeatedly percent-unescape the URL until it has no more percent-escapes.

//To canonicalize the hostname:

//Extract the hostname from the URL and then:

//Remove all leading and trailing dots.

//Replace consecutive dots with a single dot.

//If the hostname can be parsed as an IP address, normalize it to 4 dot-separated decimal values. The client should handle any legal IP-address encoding, including octal, hex, and fewer than four components.

//Lowercase the whole string.

//To canonicalize the path:

'/Resolve the sequences "/../" and "/./" in the path by replacing "/./" with "/", and removing "/../" along with the preceding path component.

//Replace runs of consecutive slashes with a single slash character.

//Do not apply these path canonicalizations to the query parameters.

//In the URL, percent-escape all characters that are <= ASCII 32, >= 127, "#", or "%". The escapes should use uppercase hex characters.

//Below are tests to help validate a canonicalization implementation.

//Canonicalize("http://host/%25%32%35") = "http://host/%25";
Canonicalize("http://host/%25%32%35%25%32%35") = "http://host/%25%25";
Canonicalize("http://host/%2525252525252525") = "http://host/%25";
Canonicalize("http://host/asdf%25%32%35asd") = "http://host/asdf%25asd";
Canonicalize("http://host/%%%25%32%35asd%%") = "http://host/%25%25%25asd%25%25";
Canonicalize("http://www.google.com/") = "http://www.google.com/";
Canonicalize("http://%31%36%38%2e%31%38%38%2e%39%39%2e%32%36/%2E%73%65%63%75%72%65/%77%77%77%2E%65%62%61%79%2E%63%6F%6D/") = "http://168.188.99.26/.secure/www.ebay.com/";
Canonicalize("http://195.127.0.11/uploads/%20%20%20%20/.verify/.eBaysecure=updateuserdataxplimnbqmn-xplmvalidateinfoswqpcmlx=hgplmcx/") = "http://195.127.0.11/uploads/%20%20%20%20/.verify/.eBaysecure=updateuserdataxplimnbqmn-xplmvalidateinfoswqpcmlx=hgplmcx/";
Canonicalize("http://host%23.com/%257Ea%2521b%2540c%2523d%2524e%25f%255E00%252611%252A22%252833%252944_55%252B") = "http://host%23.com/~a!b@c%23d$e%25f^00&11*22(33)44_55+";
Canonicalize("http://3279880203/blah") = "http://195.127.0.11/blah";
Canonicalize("http://www.google.com/blah/..") = "http://www.google.com/";
Canonicalize("www.google.com/") = "http://www.google.com/";
Canonicalize("www.google.com") = "http://www.google.com/";
Canonicalize("http://www.evil.com/blah#frag") = "http://www.evil.com/blah";
Canonicalize("http://www.GOOgle.com/") = "http://www.google.com/";
Canonicalize("http://www.google.com.../") = "http://www.google.com/";
Canonicalize("http://www.google.com/foo\tbar\rbaz\n2") ="http://www.google.com/foobarbaz2";
Canonicalize("http://www.google.com/q?") = "http://www.google.com/q?";
Canonicalize("http://www.google.com/q?r?") = "http://www.google.com/q?r?";
Canonicalize("http://www.google.com/q?r?s") = "http://www.google.com/q?r?s";
Canonicalize("http://evil.com/foo#bar#baz") = "http://evil.com/foo";
Canonicalize("http://evil.com/foo;") = "http://evil.com/foo;";
Canonicalize("http://evil.com/foo?bar;") = "http://evil.com/foo?bar;";
Canonicalize("http://\x01\x80.com/") = "http://%01%80.com/";
Canonicalize("http://notrailingslash.com") = "http://notrailingslash.com/";
Canonicalize("http://www.gotaport.com:1234/") = "http://www.gotaport.com/";
Canonicalize("  http://www.google.com/  ") = "http://www.google.com/";
Canonicalize("http:// leadingspace.com/") = "http://%20leadingspace.com/";
Canonicalize("http://%20leadingspace.com/") = "http://%20leadingspace.com/";
Canonicalize("%20leadingspace.com/") = "http://%20leadingspace.com/";
Canonicalize("https://www.securesite.com/") = "https://www.securesite.com/";
Canonicalize("http://host.com/ab%23cd") = "http://host.com/ab%23cd";
Canonicalize("http://host.com//twoslashes?more//slashes") = "http://host.com/twoslashes?more//slashes";

//Suffix/prefix expressions

//Once the URL is canonicalized, the next step is to create the suffix/prefix expressions. Each suffix/prefix expression consists of a host suffix (or full host) and a path prefix (or full path) as shown in these examples.

//Suffix/Prefix ExpressionEquivalent Regular Expressiona.b/mypath/

//http\:\/\/.*\.a\.b\/mypath\/.*

c.d/full/path.html?myparam=a

//http\:\/\/.*.c\.d\/full\/path\.html?myparam=a

//The client will form up to 30 different possible host suffix and path prefix combinations. These combinations use only the host and path components of the URL. The scheme, username, password, and port are discarded. If the URL includes query parameters, then at least one combination will include the full path and query parameters.

//For the host, the client will try at most five different strings. They are:

//The exact hostname in the URL.

//Up to four hostnames formed by starting with the last five components and successively removing the leading component. The top-level domain can be skipped. These additional hostnames should not be checked if the host is an IP address.

//For the path, the client will try at most six different strings. They are:

//The exact path of the URL, including query parameters.

//The exact path of the URL, without query parameters.

//The four paths formed by starting at the root (/) and successively appending path components, including a trailing slash.

//The following examples illustrate the check behavior:

//For the URL http://a.b.c/1/2.html?param=1, the client will try these possible strings:

//a.b.c/1/2.html?param=1 a.b.c/1/2.html a.b.c/ a.b.c/1/ b.c/1/2.html?param=1 b.c/1/2.html b.c/ b.c/1/

//For the URL http://a.b.c.d.e.f.g/1.html, the client will try these possible strings:

//a.b.c.d.e.f.g/1.html a.b.c.d.e.f.g/ (Note: skip b.c.d.e.f.g, since we'll take only the last five hostname components, and the full hostname) c.d.e.f.g/1.html c.d.e.f.g/ d.e.f.g/1.html d.e.f.g/ e.f.g/1.html e.f.g/ f.g/1.html f.g/

//For the URL http://1.2.3.4/1/, the client will try these possible strings:

//1.2.3.4/1/ 1.2.3.4/

//Hash computations

//Once the set of suffix/prefix expressions has been created, the next step is to compute the full-length SHA256 hash for each expression. A unit test (in pseudo-C) you can use to validate your hash computations is provided below.

//Examples from FIPS-180-2:

Unit Test (in pseudo-C)

// Example B1 from FIPS-180-2
string input1 = "abc";
string output1 = TruncatedSha256Prefix(input1, 32);
int expected1[] = { 0xba, 0x78, 0x16, 0xbf };
assert(output1.size() == 4);  // 4 bytes == 32 bits
for (int i = 0; i < output1.size(); i++) assert(output1[i] == expected1[i]);

// Example B2 from FIPS-180-2
string input2 = "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq";
string output2 = TruncatedSha256Prefix(input2, 48);
int expected2[] = { 0x24, 0x8d, 0x6a, 0x61, 0xd2, 0x06 };
assert(output2.size() == 6);
for (int i = 0; i < output2.size(); i++) assert(output2[i] == expected2[i]);

// Example B3 from FIPS-180-2
string input3(1000000, 'a');  // 'a' repeated a million times
string output3 = TruncatedSha256Prefix(input3, 96);
int expected3[] = { 0xcd, 0xc7, 0x6e, 0x5c, 0x99, 0x14, 0xfb, 0x92,
                    0x81, 0xa1, 0xc7, 0xe2 };
assert(output3.size() == 12);
for (int i = 0; i < output3.size(); i++) assert(output3[i] == expected3[i]);

//Hash prefix computations

//Finally, the client needs to compute the hash prefix for each full-length SHA256 hash. For Safe Browsing, a hash prefix consists of the most significant 4-32 bytes of a SHA256 hash.

//Examples from FIPS-180-2:

//Example B1 from FIPS-180-2

//Input is "abc".

//SHA256 digest is ba7816bf 8f01cfea 414140de 5dae2223 b00361a3 96177a9c b410ff61 f20015ad.

//The 32-bit hash prefix is ba7816bf.

//Example B2 from FIPS-180-2

//Input is "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq".

//SHA256 digest is 248d6a61 d20638b8 e5c02693 0c3e6039 a33ce459 64ff2167 f6ecedd4 19db06c1.

//The 48-bit hash prefix is 248d6a61 d206.

//Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates." 

End Organization settings format. 

}
{
//file continue
 to a ( 3 ) TransactionInfo structure. This structure commits
to the ( 4 ) signed transaction (Ti), ( 5 ) the list of events generated during that transaction (Ei,
Section 4.5), and the ( 6 ) state after the execution of that transaction (Si, Section 4.3). The state
is a sparse Merkle tree with an ( 7 ) account blob at each leaf.
returns true if and only if f(D) = r. In the context of the Libra Blockchain, provers are generally
validators and verifiers are clients executing read queries. However, clients — even those with only a
partial copy of the database — can also serve as a prover and perform authenticated read queries for
other clients.
a=H(h4||h5)
h0=H(0||s0)
h4=H(h0||h1)
h1=H(1||s1) h2=H(2||s2)
h5=H(h2||h3)
h3=H(3||s3)
Figure 4: A Merkle tree storing D = {0 : s0, . . .}. If f is a function that gets the third item (shown with a
dashed line) then r = s2 and π = [h3, h4] (these nodes are shown with a dotted line). Verify(a, f, r, π)
verifies that a
?
= H(h4∥H(H(2∥r)∥h3)).
//Merkle trees [11] are a common form of authenticated data structure, used to store maps between
//integers and string values. In a Merkle tree of size 2
k
, //the structure D maps every integer key
i ∈ [0, 2
k
) to a string value si
.// The authenticator is formed from the root of a full binary tree
created from the strings, labeling leaves as H(i∥si) and internal nodes as H(left∥right), where H is a
//cryptographic hash function (which we will refer to as a hash).6 The function f, which the prover
//wishes to authenticate, is an inclusion proof that a key-value pair (k, v) is within the map D.
//P authenticates lookups for an item i in D by returning a proof π that consists of the labels of the sibling of each of the ancestors of node i. 
//Figure 4 shows a lookup for item three in a Merkle tree of
size four. Item three’s node is shown with a dotted line, and the nodes included in π are shown with
a dashed line.
//6 Secure Merkle trees must use different hash functions to hash the leaves and internal nodes to avoid confusion between
the two types of nodes. While we have omitted this detail in the example for simplicity, the Libra protocol uses a
//unique hash function to distinguish between different hash function types to avoid attacks based on type conf

//Block hashing algorithm
//Bitcoin mining uses the hashcash proof of work function; the 
//hashcash algorithm requires the following parameters: a service string, a nonce, and a counter.
// In bitcoin the service string is encoded in the block header data structure, and includes a version field, the hash of the previous block, the root hash of the merkle tree of all transactions in the block, the current time, and the difficulty.// Bitcoin stores the nonce in the extraNonce field which is part of the coinbase transaction, which is stored as the left most leaf node in the merkle tree (the coinbase is the special first transaction in the block). //The counter parameter is small at 32-bits so each time it wraps the extraNonce field must be incremented (or otherwise changed) to avoid repeating work. //The basics of the hashcash algorithm are quite easy to understand and it is described in more detail here. //When mining bitcoin, the hashcash algorithm repeatedly hashes the block header while incrementing the counter & extraNonce fields. //Incrementing the extraNonce field entails recomputing the merkle tree, as the coinbase transaction is the left most leaf node. //The block is also occasionally updated as you are working on it.

//A block header contains these fields:

//Field Purpose Updated when... Size (Bytes)
Version Block version number You upgrade the software and it specifies a new version 4
hashPrevBlock 256-bit hash of the previous block header A new block comes in 32
hashMerkleRoot 256-bit hash based on all of the transactions in the block A transaction is accepted 32
//Time Current block timestamp as seconds since 1970-01-01T00:00 UTC Every few seconds 4
//Bits Current target in compact format The difficulty is adjusted 4
//Nonce 32-bit number (starts at 0) A hash is tried (increments) 4
//The body of the block contains the transactions. These are hashed only indirectly through the Merkle root. Because transactions aren't hashed directly, hashing a block with 1 transaction takes exactly the same amount of effort as hashing a block with 10,000 transactions.

/'The compact format of target is a special kind of floating-point encoding using 3 bytes mantissa, the leading byte as exponent (where only the 5 lowest bits are used) and its base is 256. Most of these fields will be the same for all users.
// There might be some minor variation in the timestamps. The nonce will usually be different, but it increases in a strictly linear way. "Nonce" starts at 0 and is incremented for each hash. Whenever Nonce overflows (which it does frequently), the extraNonce portion of the generation transaction is incremented, which changes the Merkle root.

//Moreover, it is extremely unlikely for two people to have the same Merkle root because the first transaction in your block is a generation "sent" to one of your unique Bitcoin addresses. Since your block is different from everyone else's blocks, you are (nearly) guaranteed to produce different hashes. Every hash you calculate has the same chance of winning as every other hash calculated by the network.

//Bitcoin uses: SHA256(SHA256(Block_Header)) but you have to be careful about byte-order.

//For example, this python code will calculate the hash of the block with the smallest hash as of June 2011, Block 125552. 
//use updated values IN all formats like this as live version and UODATE bitcoin.bitcoin/master file update and  approval  and inclusion and post
//The header is built from the six fields described above, concatenated together as little-endian values in hex notation:

>>> import hashlib
>>> header_hex = ("01000000" +
 "81cd02ab7e569e8bcd9317e2fe99f2de44d49ab2b8851ba4a308000000000000" +
 "e320b6c2fffc8d750423db8b1eb942ae710e951ed797f7affc8892b0f1fc122b" +
 "c7f5d74d" +
 "f2b9441a" +
 "42a14695")
>>> header_bin = header_hex.decode('hex')
>>> hash = hashlib.sha256(hashlib.sha256(header_bin).digest()).digest()
>>> hash.encode('hex_codec')
'1dbd981fe6985776b644b173a4d0385ddc1aa2a829688d1e0000000000000000'
>>> hash[::-1].encode('hex_codec')
'00000000000000001e8d6829a8a21adc5d38d0a473b144b6765798e61f98bd1d'
Endianess
//Note that the hash, which is a 256-bit number, has lots of leading zero bytes when stored or printed as a big-endian hexadecimal constant, but it has trailing zero bytes when stored or printed in little-endian. 
//For example, if interpreted as a string and the lowest (or start of) the string address keeps lowest significant byte, it is little-endian.

//The output of blockexplorer displays the hash values as big-endian numbers; notation for numbers is usual (leading digits are the most significant digits read from left to right).

//For another example, here is a version in plain C without any optimization, threading or error checking.

//Here is the same example in plain PHP without any optimization.

<?
  //This reverses and then swaps every other char
  function SwapOrder($in){
      $Split = str_split(strrev($in));
      $x='';
      for ($i = 0; $i < count($Split); $i+=2) {
          $x .= $Split[$i+1].$Split[$i];
      } 
      return $x;
  }
  
  //makes the littleEndian
  function littleEndian($value){
      return implode (unpack('H*',pack("V*",$value)));
  }
  
  $version = littleEndian(1);
  $prevBlockHash = SwapOrder('00000000000008a3a41b85b8b29ad444def299fee21793cd8b9e567eab02cd81');
  $rootHash = SwapOrder('2b12fcf1b09288fcaff797d71e950e71ae42b91e8bdb2304758dfcffc2b620e3');
  $time = littleEndian(1305998791);
  $bits = littleEndian(440711666); 
  $nonce = littleEndian(2504433986); 
  
  //concat it all
  $header_hex = $version . $prevBlockHash . $rootHash . $time . $bits . $nonce;
  
  //convert from hex to binary 
  $header_bin  = hex2bin($header_hex);
  //hash it then convert from hex to binary 
  $pass1 = hex2bin(  hash('sha256', $header_bin )  );
  //Hash it for the seconded time
  $pass2 = hash('sha256', $pass1);
  //fix the order
  $FinalHash = SwapOrder($pass2);
  
  echo   $FinalHash;
?>
}
//Bitcoin FAQ
//Tools
//What links here
//pageSource
This page was last edited on 13 May 2019, at 16:46.
Content is available under Creative Commons Attribution 3.0 unless otherwise noted.
Privacy policyAbout Bitcoin WikiDisclaimersPowered by MediaWiki