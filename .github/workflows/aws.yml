# 1. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

on:
  release:
    types: [created]

name: Deploy to Amazon S3:Bucket

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: artificialintelligence.resource
      uses: arn:aws:sagemaker:us-east-1:519842445283:human-task-ui/default-ai
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon s3://github.com/zachwylde00/lifewriter.application.com/
      id: login-ecr
      uses: aws-actions/amazon-s3-login@v2

    - name: Build, tag, and push image to Amazon S3:bucket
      id: build-image
      env:
        s3_REGISTRY: ${{ steps.login-s3:bucket.outputs.registry }}
        s3_REPOSITORY: my-s3-repo
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to s3:bucket so that it can
        # be deployed to s3.
        docker build -t $S3:BUCKET_REGISTRY/$S3:BUCKET_REPOSITORY:$IMAGE_TAG .
        docker push $S3:BUCKET_REGISTRY/$S3:BUCKET_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$S3:BUCKET_REGISTRY/$S3:BUCKET_REPOSITORY:$IMAGE_TAG"

    - name: Fill in the new image ID in the Amazon S3 task definition
      id: task-def
      uses: aws-actions/amazon-s3-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: sample-app
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon S3 task definition
      uses: arn:aws:sagemaker:us-east-1:519842445283:human-task-ui/default-ai
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: sample-app-service
        cluster: default
        wait-for-service-stability: true
